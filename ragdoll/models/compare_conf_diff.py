#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
@FileName: compare_conf_diff.py
@Time: 2024/1/25 10:05
@Author: JiaoSiMao
Description:
"""
from typing import List
from ragdoll import util
from ragdoll.models.base_model_ import Model
from ragdoll.models.domain_conf_base_infos import DomainConfBaseInfos


class CompareConfDiff(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, expected_confs_resp: List[DomainConfBaseInfos] = None, domain_result: object = None):  # noqa: E501
        """CompareConfDiff - a model defined in Swagger

        :param expected_confs_resp: The all domain conf.  # noqa: E501
        :type expected_confs_resp: str

        :param domain_result: The all domain host real conf.  # noqa: E501
        :type domain_result: str
        """
        self.swagger_types = {
            'expected_confs_resp': List[DomainConfBaseInfos],
            'domain_result': object
        }

        self.attribute_map = {
            'expected_confs_resp': 'expectedConfsResp',
            'domain_result': 'domainResult'
        }

        self._expected_confs_resp = expected_confs_resp
        self._domain_result = domain_result

    @classmethod
    def from_dict(cls, dikt) -> 'CompareConfDiff':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: the CompareConfDiff of CompareConfDiff.  # noqa: E501
        :rtype: CompareConfDiff
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_confs_resp(self) -> List[DomainConfBaseInfos]:
        """Gets expected_confs_resp of this CompareConfDiff.


        :return: The expected_confs_resp of this CompareConfDiff.
        :rtype: List[DomainConfBaseInfos]
        """
        return self._expected_confs_resp

    @expected_confs_resp.setter
    def expected_confs_resp(self, expected_confs_resp: List[DomainConfBaseInfos]):
        """Sets expected_confs_resp of this CompareConfDiff.


        :param expected_confs_resp: The expected_confs_resp of this CompareConfDiff.
        type expected_confs_resp: List[DomainConfBaseInfos]
        """

        self._expected_confs_resp = expected_confs_resp

    @property
    def domain_result(self) -> object:
        """Gets domain_result of this CompareConfDiff.


        :return: The domain_result of this CompareConfDiff.
        :rtype: str
        """
        return self._domain_result

    @domain_result.setter
    def domain_result(self, domain_result: object):
        """Sets domain_result of this CompareConfDiff.


        :param domain_result: The domain_result of this CompareConfDiff.
        type domain_result: str
        """

        self._domain_result = domain_result
