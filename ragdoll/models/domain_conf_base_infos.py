#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
@FileName: domain_conf_base_infos.py
@Time: 2024/1/25 15:06
@Author: JiaoSiMao
Description:
"""
from typing import List

from ragdoll.models.base_model_ import Model
from ragdoll.models.conf_base import ConfBase
from ragdoll import util


class DomainConfBaseInfos(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, conf_base_infos: List[ConfBase] = None, domain_name: str = None):  # noqa: E501
        """DomainConfBaseInfos - a model defined in Swagger

        :param conf_base_infos: The all domain conf.  # noqa: E501
        :type List[ConfBase]

        :param domain_name: The domain_name of DomainConfBaseInfos.  # noqa: E501
        :type domain_name: str
        """
        self.swagger_types = {
            'conf_base_infos': List[ConfBase],
            'domain_name': str
        }

        self.attribute_map = {
            'conf_base_infos': 'confBaseInfos',
            'domain_name': 'domainName'
        }

        self._conf_base_infos = conf_base_infos
        self._domain_name = domain_name

    @classmethod
    def from_dict(cls, dikt) -> 'DomainConfBaseInfos':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: the DomainConfBaseInfos of DomainConfBaseInfos.  # noqa: E501
        :rtype: DomainConfBaseInfos
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conf_base_infos(self) -> List[ConfBase]:
        """Gets conf_base_infos of this DomainConfBaseInfos.


        :return: The conf_base_infos of this DomainConfBaseInfos.
        :rtype: List[ConfBase]
        """
        return self._conf_base_infos

    @conf_base_infos.setter
    def conf_base_infos(self, conf_base_infos: List[ConfBase]):
        """Sets conf_base_infos of this DomainConfBaseInfos.


        :param conf_base_infos: The conf_base_infos of this DomainConfBaseInfos.
        type expected_confs_resp: List[ConfBase]
        """

        self._conf_base_infos = conf_base_infos

    @property
    def domain_name(self) -> str:
        """Gets domain_name of this DomainConfBaseInfos.


        :return: The domain_name of this DomainConfBaseInfos.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name: str):
        """Sets domain_name of this DomainConfBaseInfos.


        :param domain_name: The domain_result of this DomainConfBaseInfos.
        type domain_result: str
        """

        self._domain_name = domain_name
