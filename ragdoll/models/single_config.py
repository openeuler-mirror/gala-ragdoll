#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
@FileName: single_config.py
@Time: 2023/9/6 17:05
@Author: JiaoSiMao
Description:
"""
from ragdoll.models.base_model_ import Model
from ragdoll import util


class SingleConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, single_file_path: str = None, single_is_synced: str = None):  # noqa: E501
        """SingleConfig - a model defined in Swagger

        :param single_file_path: The path of conf.  # noqa: E501
        :type single_file_path: str
        :param single_is_synced: The sync_status of this configuration item.  # noqa: E501
        :type single_is_synced: str
        """
        self.swagger_types = {
            'single_file_path': str,
            'single_is_synced': str
        }

        self.attribute_map = {
            'single_file_path': 'singleFilePath',
            'single_is_synced': 'singleIsSynced'
        }

        self._single_file_path = single_file_path
        self._single_is_synced = single_is_synced

    @classmethod
    def from_dict(cls, dikt) -> 'SingleConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SingleConfig of this config.  # noqa: E501
        :rtype: SingleConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def single_file_path(self) -> str:
        """Gets the single_file_path of this SingleConfig.
        :return: The single_file_path of this SingleConfig.
        :rtype: str
        """
        return self._single_file_path

    @single_file_path.setter
    def single_file_path(self, single_file_path: str):
        """Sets the single_file_path of this SingleConfig.
        :param single_file_path: The single_file_path of this SingleConfig.
        :type single_file_path: str
        """
        if single_file_path is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")  # noqa: E501

        self._single_file_path = single_file_path

    @property
    def single_is_synced(self) -> str:
        """Gets the single_is_synced of this SingleConfig.
        :return: The single_is_synced of this SingleConfig.
        :rtype: str
        """
        return self._single_is_synced

    @single_is_synced.setter
    def single_is_synced(self, single_is_synced: str):
        """Sets the single_is_synced of this SingleConfig.
        :param single_is_synced: The single_is_synced of this SingleConfig.
        :type single_is_synced: str
        """
        allowed_values = ["NOT FOUND", "NOT SYNCHRONIZE", "SYNCHRONIZED"]  # noqa: E501
        if single_is_synced not in allowed_values:
            raise ValueError(
                "Invalid value for `single_is_synced` ({0}), must be one of {1}"
                .format(single_is_synced, allowed_values)
            )

        self._single_is_synced = single_is_synced
