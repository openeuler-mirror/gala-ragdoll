#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2021-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
"""
@FileName: conf_base.py
@Time: 2024/1/25 15:09
@Author: JiaoSiMao
Description:
"""
from ragdoll import util
from ragdoll.models.base_model_ import Model


class ConfBase(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, file_path: str = None, expected_contents: str = None):  # noqa: E501
        """ConfBaseInfo - a model defined in Swagger

        :param file_path: The file_path of this ConfBase.  # noqa: E501
        :type file_path: str
        :param expected_contents: The expected_contents of this ConfBase.  # noqa: E501
        :type expected_contents: str
        """
        self.swagger_types = {
            'file_path': str,
            'expected_contents': str
        }

        self.attribute_map = {
            'file_path': 'filePath',
            'expected_contents': 'expectedContents'
        }

        self._file_path = file_path
        self._expected_contents = expected_contents

    @classmethod
    def from_dict(cls, dikt) -> 'ConfBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConfBase of this ConfBase.  # noqa: E501
        :rtype: ConfBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_path(self) -> str:
        """Gets the file_path of this ConfBase.

        the path of a configuration file  # noqa: E501

        :return: The file_path of this ConfBase.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path: str):
        """Sets the file_path of this ConfBase.

        the path of a configuration file  # noqa: E501

        :param file_path: The file_path of this ConfBase.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def expected_contents(self) -> str:
        """Gets the expected_contents of this ConfBase.

        expected configuration value of configuration item  # noqa: E501

        :return: The expected_contents of this ConfBase.
        :rtype: str
        """
        return self._expected_contents

    @expected_contents.setter
    def expected_contents(self, expected_contents: str):
        """Sets the expected_contents of this ConfBase.

        expected configuration value of configuration item  # noqa: E501

        :param expected_contents: The expected_contents of this ConfBase.
        :type expected_contents: str
        """

        self._expected_contents = expected_contents
