# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ragdoll.models.base_model_ import Model
from ragdoll import util


class RealconfBaseInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, file_path: str=None, rpm_name: str=None, rpm_version: str=None, rpm_release: str=None, file_attr: str=None, file_owner: str=None, conf_type: str=None, spacer: str=None, conf_contens: str=None):  # noqa: E501
        """RealconfBaseInfo - a model defined in Swagger

        :param path: The path of this RealconfBaseInfo.  # noqa: E501
        :type path: str
        :param file_path: The file_path of this RealconfBaseInfo.  # noqa: E501
        :type file_path: str
        :param rpm_name: The rpm_name of this RealconfBaseInfo.  # noqa: E501
        :type rpm_name: str
        :param rpm_version: The rpm_version of this RealconfBaseInfo.  # noqa: E501
        :type rpm_version: str
        :param rpm_release: The rpm_release of this RealconfBaseInfo.  # noqa: E501
        :type rpm_release: str
        :param file_attr: The file_attr of this RealconfBaseInfo.  # noqa: E501
        :type file_attr: str
        :param file_owner: The file_owner of this RealconfBaseInfo.  # noqa: E501
        :type file_owner: str
        :param conf_type: The conf_type of this RealconfBaseInfo.  # noqa: E501
        :type conf_type: str
        :param spacer: The spacer of this RealconfBaseInfo.  # noqa: E501
        :type spacer: str
        :param conf_contens: The conf_contens of this RealconfBaseInfo.  # noqa: E501
        :type conf_contens: str
        """
        self.swagger_types = {
            'path': str,
            'file_path': str,
            'rpm_name': str,
            'rpm_version': str,
            "rpm_release": str,
            'file_attr': str,
            'file_owner': str,
            'conf_type': str,
            'spacer': str,
            'conf_contens': str
        }

        self.attribute_map = {
            'path': 'path',
            'file_path': 'filePath',
            'rpm_name': 'rpmName',
            'rpm_version': 'rpmVersion',
            'rpm_release': 'rpmRelease',
            'file_attr': 'fileAttr',
            'file_owner': 'fileOwner',
            'conf_type': 'confType',
            'spacer': 'spacer',
            'conf_contens': 'confContents'
        }

        self._path = path
        self._file_path = file_path
        self._rpm_name = rpm_name
        self._rpm_version = rpm_version
        self._rpm_release = rpm_release
        self._file_attr = file_attr
        self._file_owner = file_owner
        self._conf_type = conf_type
        self._spacer = spacer
        self._conf_contens = conf_contens

    @classmethod
    def from_dict(cls, dikt) -> 'RealconfBaseInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RealconfBaseInfo of this RealconfBaseInfo.  # noqa: E501
        :rtype: RealconfBaseInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this RealconfBaseInfo.

        The currently configured xpath path  # noqa: E501

        :return: The path of this RealconfBaseInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this RealconfBaseInfo.

        The currently configured xpath path  # noqa: E501

        :param path: The path of this RealconfBaseInfo.
        :type path: str
        """

        self._path = path

    @property
    def file_path(self) -> str:
        """Gets the file_path of this RealconfBaseInfo.

        The real file path of the configuration item in OS  # noqa: E501

        :return: The file_path of this RealconfBaseInfo.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path: str):
        """Sets the file_path of this RealconfBaseInfo.

        The real file path of the configuration item in OS  # noqa: E501

        :param file_path: The file_path of this RealconfBaseInfo.
        :type file_path: str
        """

        self._file_path = file_path

    @property
    def rpm_name(self) -> str:
        """Gets the rpm_name of this RealconfBaseInfo.


        :return: The rpm_name of this RealconfBaseInfo.
        :rtype: str
        """
        return self._rpm_name

    @rpm_name.setter
    def rpm_name(self, rpm_name: str):
        """Sets the rpm_name of this RealconfBaseInfo.


        :param rpm_name: The rpm_name of this RealconfBaseInfo.
        :type rpm_name: str
        """

        self._rpm_name = rpm_name

    @property
    def rpm_version(self) -> str:
        """Gets the rpm_version of this RealconfBaseInfo.


        :return: The rpm_version of this RealconfBaseInfo.
        :rtype: str
        """
        return self._rpm_version

    @rpm_version.setter
    def rpm_version(self, rpm_version: str):
        """Sets the rpm_version of this RealconfBaseInfo.


        :param rpm_version: The rpm_version of this RealconfBaseInfo.
        :type rpm_version: str
        """

        self._rpm_version = rpm_version

    @property
    def rpm_release(self) -> str:
        """Gets the rpm_release of this RealconfBaseInfo.
        :return: The rpm_release of this RealconfBaseInfo.
        :rtype: str
        """
        return self._rpm_release

    @rpm_release.setter
    def rpm_release(self, rpm_release: str):
        """Sets the rpm_release of this RealconfBaseInfo.


        :param rpm_release: The rpm_release of this RealconfBaseInfo.
        :type rpm_release: str
        """

        self._rpm_release = rpm_release

    @property
    def file_attr(self) -> str:
        """Gets the file_attr of this RealconfBaseInfo.

        the attributes for the real file of the configuration item in OS  # noqa: E501

        :return: The file_attr of this RealconfBaseInfo.
        :rtype: str
        """
        return self._file_attr

    @file_attr.setter
    def file_attr(self, file_attr: str):
        """Sets the file_attr of this RealconfBaseInfo.

        the attributes for the real file of the configuration item in OS  # noqa: E501

        :param file_attr: The file_attr of this RealconfBaseInfo.
        :type file_attr: str
        """

        self._file_attr = file_attr

    @property
    def file_owner(self) -> str:
        """Gets the file_owner of this RealconfBaseInfo.

        the owner information for the real file of the configuration item in OS  # noqa: E501

        :return: The file_owner of this RealconfBaseInfo.
        :rtype: str
        """
        return self._file_owner

    @file_owner.setter
    def file_owner(self, file_owner: str):
        """Sets the file_owner of this RealconfBaseInfo.

        the owner information for the real file of the configuration item in OS  # noqa: E501

        :param file_owner: The file_owner of this RealconfBaseInfo.
        :type file_owner: str
        """

        self._file_owner = file_owner

    @property
    def conf_type(self) -> str:
        """Gets the conf_type of this RealconfBaseInfo.

        the configuration type  # noqa: E501

        :return: The conf_type of this RealconfBaseInfo.
        :rtype: str
        """
        return self._conf_type

    @conf_type.setter
    def conf_type(self, conf_type: str):
        """Sets the conf_type of this RealconfBaseInfo.

        the configuration type  # noqa: E501

        :param conf_type: The conf_type of this RealconfBaseInfo.
        :type conf_type: str
        """
        allowed_values = ["key-value", "toml", "json", "xml", "text"]  # noqa: E501
        if conf_type not in allowed_values:
            raise ValueError(
                "Invalid value for `conf_type` ({0}), must be one of {1}"
                .format(conf_type, allowed_values)
            )

        self._conf_type = conf_type

    @property
    def spacer(self) -> str:
        """Gets the spacer of this RealconfBaseInfo.

        spacers of configuration items in the configuration file  # noqa: E501

        :return: The spacer of this RealconfBaseInfo.
        :rtype: str
        """
        return self._spacer

    @spacer.setter
    def spacer(self, spacer: str):
        """Sets the spacer of this RealconfBaseInfo.

        spacers of configuration items in the configuration file  # noqa: E501

        :param spacer: The spacer of this RealconfBaseInfo.
        :type spacer: str
        """

        self._spacer = spacer

    @property
    def conf_contens(self) -> str:
        """Gets the conf_contens of this RealconfBaseInfo.

        the specific content of the configuration item  # noqa: E501

        :return: The conf_contens of this RealconfBaseInfo.
        :rtype: str
        """
        return self._conf_contens

    @conf_contens.setter
    def conf_contens(self, conf_contens: str):
        """Sets the conf_contens of this RealconfBaseInfo.

        the specific content of the configuration item  # noqa: E501

        :param conf_contens: The conf_contens of this RealconfBaseInfo.
        :type conf_contens: str
        """

        self._conf_contens = conf_contens
